}
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(inv) m <<- inv
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinv()
if(!is.null(m)){
message("Getting cached data.")
return(m)
}
data <- x$get()
m <- solve(data)
x$setinv(m)
m
}
x
m
x <- 9
x
x <-  x = rbind(c(1, 2, 3, 4, 5), c(5, 4, 3, 2, 1))
x <- rbind(c(1, 2, 3, 4, 5), c(5, 4, 3, 2, 1))
x
cacheSolve(m)
cacheSolve(x)
cacheSolve(x)
m <- rbind(c(1, 2, 3, 4, 5), c(5, 4, 3, 2, 1))
cacheSolve(m)
cacheSolve(m1)
m1 <- makeCacheMatrix(m)
cacheSolve(m1)
mat<-matrix(c(1,4,9,0,-3,2,2,7,8),3,3)
mat
m1 <- makeCacheMatrix(mat)
cacheSolve(mat)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y*
m <<- NULL
}
get <- function() x
setinv <- function(inv) m <<- inv
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
cacheSolve(mat)
cacheSolve(mat)
m1 <- makeCacheMatrix(mat)
cacheSolve(mat)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y = matrix) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(inv) m <<- inv
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
cacheSolve(mat)
m1 <- makeCacheMatrix(mat)
cacheSolve(mat)
is.recursive(x)
is.atomic(x)
cacheSolve <- function(x = matrix, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinv()
if(!is.null(m)){
message("Getting cached data.")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
}
cacheSolve(mat)
x = rbind(c(1, -1/4), c(-1/4, 1))
x
cacheSolve(m)
cacheSolve(x)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data.")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
x = rbind(c(1, -1/4), c(-1/4, 1))
x
cacheSolve(m)
cacheSolve(x)
m1 <- makeCacheMatrix(m)
m1
cacheSolve(m)
cacheSolve(m1)
cacheSolve(makeCacheMatrix(2*diag(3)))
cacheSolve(makeCacheMatrix(m1))
cacheSolve(makeCacheMatrix(m))
cacheSolve(makeCacheMatrix(x))
x
x = rbind(c(1, 2, 3, 4, 5), c(5, 4, 3, 2, 1))
x
cacheSolve(makeCacheMatrix(x))
x = rbind(c(2.5, 5), c(5, 2.5))
x
cacheSolve(makeCacheMatrix(x))
cacheSolve(x)
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
}
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(inv) m <<- inv
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinv()
if(!is.null(m)){
message("Getting cached data.")
return(m)
}
data <- x$get()
m <- solve(data)
x$setinv(m)
m
}
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
cacheSolve(m)
x = rbind(c(2.5, 5, 10), c(10, 5, 2.5))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
x = c(5, 2.5), x(2.5, 5)
x <- c(5, 2.5), x(2.5, 5)
x <- (c(5, 2.5), x(2.5, 5))
x <- rbind(c(5, 2.5), x(2.5, 5))
x <- (c(5, 2.5), (2.5, 5))
x <- rbind(c(5, 2.5), (2.5, 5))
x <- (c(5, 2.5), c(2.5, 5))
x <- rbind(c(5, 2.5), c(2.5, 5))
x
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
cacheSolve(m)
